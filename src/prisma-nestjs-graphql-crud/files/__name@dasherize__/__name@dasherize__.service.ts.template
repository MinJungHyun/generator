import {
  CreateMany<%= pascalName %>Args,
  CreateOne<%= pascalName %>Args,
  DeleteMany<%= pascalName %>Args,
  DeleteOne<%= pascalName %>Args,
  FindFirst<%= pascalName %>OrThrowArgs,
  FindMany<%= pascalName %>Args,
  FindUnique<%= pascalName %>Args,
  <%= pascalName %>AggregateArgs,
  <%= pascalName %>GroupByArgs,
  UpdateMany<%= pascalName %>Args,
  UpdateOne<%= pascalName %>Args,
  UpsertOne<%= pascalName %>Args
} from '@generated';
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../prisma.service';

@Injectable()
export class <%= pascalName %>Service {
  constructor(private prisma: PrismaService) {}

  async findFirst(args: FindFirst<%= pascalName %>OrThrowArgs) {
    return await this.prisma.<%= camelName %>.findFirst(args);
  }

  findUnique(args: FindUnique<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.findUnique(args);
  }

  findMany(args: FindMany<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.findMany(args);
  }

  aggregate(args: <%= pascalName %>AggregateArgs) {
    return this.prisma.<%= camelName %>.aggregate(args);
  }

  groupBy(args: <%= pascalName %>GroupByArgs) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return this.prisma.<%= camelName %>.groupBy(args);
  }

  create(args: CreateOne<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.create(args);
  }

  createMany(args: CreateMany<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.createMany(args);
  }

  update(args: UpdateOne<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.update(args);
  }

  updateMany(args: UpdateMany<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.updateMany(args);
  }

  upsert(args: UpsertOne<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.upsert(args);
  }

  delete(args: DeleteOne<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.delete(args);
  }

  deleteMany(args: DeleteMany<%= pascalName %>Args) {
    return this.prisma.<%= camelName %>.deleteMany(args);
  }
}
