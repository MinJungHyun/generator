import { CreateMany<%= pascalName %>Args } from '@generated/<%= kebabName %>/create-many-<%= kebabName %>.args';
import { CreateOne<%= pascalName %>Args } from '@generated/<%= kebabName %>/create-one-<%= kebabName %>.args';
import { DeleteMany<%= pascalName %>Args } from '@generated/<%= kebabName %>/delete-many-<%= kebabName %>.args';
import { DeleteOne<%= pascalName %>Args } from '@generated/<%= kebabName %>/delete-one-<%= kebabName %>.args';
import { FindFirst<%= pascalName %>OrThrowArgs } from '@generated/<%= kebabName %>/find-first-<%= kebabName %>-or-throw.args';
import { FindMany<%= pascalName %>Args } from '@generated/<%= kebabName %>/find-many-<%= kebabName %>.args';
import { FindUnique<%= pascalName %>Args } from '@generated/<%= kebabName %>/find-unique-<%= kebabName %>.args';
import { <%= pascalName %>AggregateArgs } from '@generated/<%= kebabName %>/<%= kebabName %>-aggregate.args';
import { <%= pascalName %>GroupByArgs } from '@generated/<%= kebabName %>/<%= kebabName %>-group-by.args';
import { UpdateMany<%= pascalName %>Args } from '@generated/<%= kebabName %>/update-many-<%= kebabName %>.args';
import { UpdateOne<%= pascalName %>Args } from '@generated/<%= kebabName %>/update-one-<%= kebabName %>.args';
import { UpsertOne<%= pascalName %>Args } from '@generated/<%= kebabName %>/upsert-one-<%= kebabName %>.args';
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../prisma.service';
import { Prisma } from '@prisma/client';
@Injectable()
export class <%= pascalName %>Service {
  constructor(private prisma: PrismaService) {}

  async findFirst(args: FindFirst<%= pascalName %>OrThrowArgs) {
    return await this.prisma.<%= kebabName %>.findFirst(args);
  }

  findUnique(args: FindUnique<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.findUnique(args);
  }

  findMany(args: FindMany<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.findMany(args);
  }

  aggregate(args: <%= pascalName %>AggregateArgs) {
    return this.prisma.<%= kebabName %>.aggregate(args);
  }

  groupBy(args: <%= pascalName %>GroupByArgs) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return this.prisma.<%= kebabName %>.groupBy(args);
  }

  create(args: CreateOne<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.create(args);
  }

  createMany(args: CreateMany<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.createMany(args);
  }

  update(args: UpdateOne<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.update(args);
  }

  updateMany(args: UpdateMany<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.updateMany(args);
  }

  upsert(args: UpsertOne<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.upsert(args);
  }

  delete(args: DeleteOne<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.delete(args);
  }

  deleteMany(args: DeleteMany<%= pascalName %>Args) {
    return this.prisma.<%= kebabName %>.deleteMany(args);
  }
}
