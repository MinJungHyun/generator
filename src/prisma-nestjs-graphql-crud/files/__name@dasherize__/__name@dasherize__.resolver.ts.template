import {
  Aggregate<%= pascalName %>,
  CreateOne<%= pascalName %>Args,
  CreateMany<%= pascalName %>Args,
  DeleteOne<%= pascalName %>Args,
  DeleteMany<%= pascalName %>Args,
  FindFirst<%= pascalName %>OrThrowArgs,
  FindMany<%= pascalName %>Args,
  FindUnique<%= pascalName %>Args,
  <%= pascalName %>,
  <%= pascalName %>AggregateArgs,
  <%= pascalName %>GroupBy,
  <%= pascalName %>GroupByArgs,
  UpdateMany<%= pascalName %>Args,
  UpdateOne<%= pascalName %>Args,
  UpsertOne<%= pascalName %>Args
} from '@generated';
import { AffectedRows } from '@generated/prisma/affected-rows.output';
import { Args, Query, Mutation, Resolver } from '@nestjs/graphql';
import { <%= pascalName %>Service } from './<%= kebabName %>.service';

@Resolver(() => <%= pascalName %>)
export class <%= pascalName %>Resolver {
  constructor(private readonly <%= camelName %>Service: <%= pascalName %>Service) {}

  @Query(() => <%= pascalName %>, { nullable: false })
  findFirst<%= pascalName %>(@Args() args: FindFirst<%= pascalName %>OrThrowArgs) {
    return this.<%= camelName %>Service.findFirst(args);
  }

  @Query(() => <%= pascalName %>, { nullable: false })
  findUnique<%= pascalName %>(@Args() args: FindUnique<%= pascalName %>Args) {
    return this.<%= camelName %>Service.findUnique(args);
  }

  @Query(() => [<%= pascalName %>], { nullable: false })
  findMany<%= pascalName %>(@Args() args: FindMany<%= pascalName %>Args) {
    return this.<%= camelName %>Service.findMany(args);
  }

  @Query(() => Aggregate<%= pascalName %>, { nullable: false })
  aggregate<%= pascalName %>(@Args() args: <%= pascalName %>AggregateArgs) {
    return this.<%= camelName %>Service.aggregate(args);
  }

  @Query(() => [<%= pascalName %>GroupBy], { nullable: false })
  groupBy<%= pascalName %>(@Args() args: <%= pascalName %>GroupByArgs) {
    return this.<%= camelName %>Service.groupBy(args);
  }

  @Mutation(() => <%= pascalName %>, { nullable: true })
  create<%= pascalName %>(@Args() args: CreateOne<%= pascalName %>Args) {
    return this.<%= camelName %>Service.create(args);
  }

  @Mutation(() => AffectedRows, { nullable: true })
  createMany<%= pascalName %>(@Args() args: CreateMany<%= pascalName %>Args) {
    return this.<%= camelName %>Service.createMany(args);
  }

  @Mutation(() => <%= pascalName %>, { nullable: true })
  update<%= pascalName %>(@Args() args: UpdateOne<%= pascalName %>Args) {
    return this.<%= camelName %>Service.update(args);
  }

  @Mutation(() => AffectedRows, { nullable: true })
  updateMany<%= pascalName %>(@Args() args: UpdateMany<%= pascalName %>Args) {
    return this.<%= camelName %>Service.updateMany(args);
  }

  @Mutation(() => <%= pascalName %>, { nullable: true })
  upsert<%= pascalName %>(@Args() args: UpsertOne<%= pascalName %>Args) {
    return this.<%= camelName %>Service.upsert(args);
  }

  @Mutation(() => <%= pascalName %>, { nullable: true })
  delete<%= pascalName %>(@Args() args: DeleteOne<%= pascalName %>Args) {
    return this.<%= camelName %>Service.delete(args);
  }

  @Mutation(() => AffectedRows, { nullable: true })
  deleteMany<%= pascalName %>(@Args() args: DeleteMany<%= pascalName %>Args) {
    return this.<%= camelName %>Service.deleteMany(args);
  }
}
